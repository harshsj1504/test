#include <p18f4550.h>
#include <stdlib.h>

void timer_isr(void);
extern void _startup(void);
#pragma code _RESET_INTERRUPT_VECTOR = 0x0000
void _reset(void)
{
    _asm goto _startup _endasm
}

#pragma code

#pragma code _HIGH_INTERRUPT_VECTOR = 0x0008
void high_ISR(void)
{
    _asm goto timer_isr _endasm
}
#pragma code

#pragma code _LOW_INTERRUPT_VECTOR = 0x0018
void low_ISR(void)
{
    // Add low-priority interrupt handling if needed
}
#pragma code

#pragma interrupt timer_isr
void timer_isr(void)
{
    TMR0H = 0xFF;
    TMR0L = 0x00;
    PORTB = ~PORTB;
    INTCONbits.TMR0IF = 0; // Clear Timer0 interrupt flag
}

void main()
{
    ADCON1 = 0x0F;       // Configure all ports as digital
    TRISB = 0;           // Set PORTB as output
    PORTB = 0xFF;        // Initialize PORTB with all 1s
    T0CON = 0x00;        // Configure Timer0 with no prescaler
    TMR0H = 0xFF;        // Set Timer0 high byte
    TMR0L = 0x00;        // Set Timer0 low byte
    INTCONbits.TMR0IF = 0; // Clear Timer0 interrupt flag
    INTCONbits.TMR0IE = 1; // Enable Timer0 interrupt
    T0CONbits.TMR0ON = 1;  // Turn on Timer0
    INTCONbits.GIEH = 1;   // Enable high-priority interrupts
    
    while(1); // Infinite loop
}
